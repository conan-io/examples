void cancelPrevious() {
    stage('Cancelling previous') {
        def buildNumber = env.BUILD_NUMBER as int
        if (buildNumber > 1) milestone(buildNumber - 1)
        milestone(buildNumber)
    }
}

private Closure runTests(String nodeName) {
    def ret = {
        node(nodeName) {
            stage("${nodeName}") {
                def scmVars = checkout scm
                def venvName = "examples_venv"
                def pipInstalls = 'python -m pip install tox tox-venv requests importlib-metadata && '
                if (nodeName == 'Linux') {
                    def dockerImage = 'conanio/ci-functional'
                    docker.image(dockerImage).inside('--entrypoint=') {
                        def sourcedir = '/home/conan/'
                        def pyenvdir = "${sourcedir}.pyenv"
                        sh(script: "cp -R ./ ${sourcedir}")
                        sh(script: "chown -R conan ${sourcedir}")
                        def command = "su - conan -c \"" \
                                        + "export PYENV_ROOT=${pyenvdir} && " \
                                        + "export PATH=\"${pyenvdir}/bin:\$PATH\" && " \
                                        + "pyenv local \$PY36 \$PY38 \$PY39 && " \
                                        + pipInstalls \
                                        + "python .ci/last_conan_version.py && " \
                                        + "python -m tox\""
                        sh(script: command)
                    }
                }
                else if (nodeName=="Macos") {
                    def localDir = "/Users/jenkins"
                    withEnv(["PY36=3.6.12", "PY38=3.8.6", "PY39=3.9.0",
                            "PYENV_ROOT=${localDir}/.pyenv", "PATH+EXTRA=${localDir}/.pyenv/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"]) {
                            def pythonLocation = "${localDir}/.pyenv/versions/\$PY36/bin/python"
                            def configPyenv =  "pyenv local \$PY36 \$PY38 \$PY39 && "
                            def launchCommand = configPyenv + pipInstalls + "${pythonLocation} .ci/last_conan_version.py && ${pythonLocation} -m tox"
                            sh(script: launchCommand)
                    }
                }
                else if (nodeName=="Windows") {
                    withEnv(['PY36=Python36', 'PY38=Python38-64', 'CMAKE_GENERATOR="Visual Studio 2019"']) {
                        def pythonVersion = "PY36"
                        def pythonLocation = "C:/%${pythonVersion}%/python.exe"
                        def launchCommand = pipInstalls + "${pythonLocation} .ci/last_conan_version.py && ${pythonLocation} -m tox"
                        bat(script: launchCommand)
                    }
                }
                cleanWs()
            }
        }
    }
    return ret
}

try {
    cancelPrevious()

    def branchName = env.BRANCH_NAME
    def jobName = env.JOB_NAME

    echo "branchName: ${branchName}"
    echo "jobName: ${jobName}"

    def nodes = ['Windows', 'Macos', 'Linux']
    def paralellRuns = [:]
    nodes.each { node ->
        paralellRuns["${node}"] = runTests(node)
    }
    parallel(paralellRuns)
}
catch (e) {
    echo "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    throw e
}
