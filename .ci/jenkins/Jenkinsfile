void cancelPrevious() {
    stage('Cancelling previous') {
        def buildNumber = env.BUILD_NUMBER as int
        if (buildNumber > 1) milestone(buildNumber - 1)
        milestone(buildNumber)
    }
}

boolean isMaster = env.BRANCH_NAME == 'master'

private Closure runTests(String nodeName) {
    def ret = {
        node(nodeName) {
            stage("${nodeName}") {
                try {
                    checkout scm
                    if (nodeName == 'Linux') {
                        def dockerImage = 'conanio/ci-functional'
                        docker.image(dockerImage).inside('--entrypoint=') {
                            def sourcedir = '/home/conan/'
                            def pyenvdir = "${sourcedir}.pyenv"
                            sh(script: "cp -R ./ ${sourcedir}")
                            sh(script: "chown -R conan ${sourcedir}")
                            def command = "su - conan -c \"" \
                                        + "export PYENV_ROOT=${pyenvdir} && " \
                                        + "export PATH=\"${pyenvdir}/bin:\$PATH\" && " \
                                        + "pyenv local \$PY38 \$PY39 && " \
                                        + "python -m pip install tox tox-venv requests && " \
                                        + "python -m tox --verbose\""
                            sh(script: command)
                        }
                    }
                    else if (nodeName=='Macos') {
                        def localDir = '/Users/jenkins'
                        withEnv(['PY38=3.8.6', 'PY39=3.9.0',
                                "PYENV_ROOT=${localDir}/.pyenv", 
                                "PATH+EXTRA=${localDir}/.pyenv/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"]) {
                                def pythonLocation = "${localDir}/.pyenv/versions/\$PY38/bin/python"
                                def launchCommand = "pyenv local \$PY38 \$PY39 && " \
                                                  + "${pythonLocation} -m tox"
                                sh(script: launchCommand)
                        }
                    }
                    else if (nodeName=='Windows') {
                        withEnv(['CMAKE_GENERATOR=Visual Studio 15 2017', 'CMAKE_GENERATOR_PLATFORM=x64']) {
                            def pythonLocation = "C:/Python38-64/python.exe"
                            def launchCommand = "tox -vv"
                            bat(script: launchCommand)
                        }
                    }
                }
                finally {
                    cleanWs()
                }
            }
        }
    }
    return ret
}

try {
    cancelPrevious()

    def nodes = ['Windows', 'Macos', 'Linux']
    def paralellRuns = [:]
    nodes.each { node ->
        paralellRuns["${node}"] = runTests(node)
    }
    parallel(paralellRuns)
}
catch (e) {
    if (isMaster) {
        def subject = "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
        def summary = "${subject} (${env.BUILD_URL})"
        slackSend (color: '#FF0000', message: summary)
    }
    throw e
}
